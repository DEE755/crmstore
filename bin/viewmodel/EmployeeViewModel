package viewmodel;

import java.util.List;
import java.util.ArrayList;
import model.Employee;
import model.customer.Customer;

public class SharedViewModel {
    private static SharedViewModel instance;
    
    // Shared data
    private Employee currentEmployee;
    private List<Customer> customers;
    private List<Employee> employees;
    private boolean isLoggedIn;
    
    // Private constructor for Singleton pattern
    private SharedViewModel() {
        this.customers = new ArrayList<>();
        this.employees = new ArrayList<>();
        this.isLoggedIn = false;
    }
    
    // Singleton instance
    public static SharedViewModel getInstance() {
        if (instance == null) {
            instance = new SharedViewModel();
        }
        return instance;
    }
    
    // Current Employee methods
    public Employee getCurrentEmployee() {
        return currentEmployee;
    }
    
    public void setCurrentEmployee(Employee employee) {
        this.currentEmployee = employee;
        this.isLoggedIn = employee != null;
    }
    
    // Login state methods
    public boolean isLoggedIn() {
        return isLoggedIn;
    }
    
    public void logout() {
        this.currentEmployee = null;
        this.isLoggedIn = false;
    }
    
    // Customer data methods
    public List<Customer> getCustomers() {
        return new ArrayList<>(customers);
    }
    
    public void setCustomers(List<Customer> customers) {
        this.customers = new ArrayList<>(customers);
    }
    
    public void addCustomer(Customer customer) {
        this.customers.add(customer);
    }
    
    public Customer getCustomerById(int id) {
        return customers.stream()
                .filter(c -> c.getId() == id)
                .findFirst()
                .orElse(null);
    }
    
    // Employee data methods
    public List<Employee> getEmployees() {
        return new ArrayList<>(employees);
    }
    
    public void setEmployees(List<Employee> employees) {
        this.employees = new ArrayList<>(employees);
    }
    
    public void addEmployee(Employee employee) {
        this.employees.add(employee);
    }
}